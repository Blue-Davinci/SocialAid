// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: program_queries.sql

package database

import (
	"context"
	"time"
)

const createNewProgram = `-- name: CreateNewProgram :one
INSERT INTO programs (name, category, description) 
VALUES ($1, $2, $3) 
RETURNING id, created_at, updated_at
`

type CreateNewProgramParams struct {
	Name        string
	Category    string
	Description string
}

type CreateNewProgramRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateNewProgram(ctx context.Context, arg CreateNewProgramParams) (CreateNewProgramRow, error) {
	row := q.db.QueryRowContext(ctx, createNewProgram, arg.Name, arg.Category, arg.Description)
	var i CreateNewProgramRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getProgramById = `-- name: GetProgramById :one
SELECT 
    id,
    name,
    category,
    description,
    created_at,
    updated_at
FROM programs
WHERE id = $1
`

func (q *Queries) GetProgramById(ctx context.Context, id int32) (Program, error) {
	row := q.db.QueryRowContext(ctx, getProgramById, id)
	var i Program
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProgramById = `-- name: UpdateProgramById :one
UPDATE programs
SET 
    name = $2,
    category = $3,
    description = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING updated_at
`

type UpdateProgramByIdParams struct {
	ID          int32
	Name        string
	Category    string
	Description string
}

func (q *Queries) UpdateProgramById(ctx context.Context, arg UpdateProgramByIdParams) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, updateProgramById,
		arg.ID,
		arg.Name,
		arg.Category,
		arg.Description,
	)
	var updated_at time.Time
	err := row.Scan(&updated_at)
	return updated_at, err
}
