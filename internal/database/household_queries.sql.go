// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: household_queries.sql

package database

import (
	"context"
	"time"
)

const createNewHousehold = `-- name: CreateNewHousehold :one
INSERT INTO households (program_id, geolocation_id, name) 
VALUES ($1, $2, $3) 
RETURNING id, created_at
`

type CreateNewHouseholdParams struct {
	ProgramID     int32
	GeolocationID int32
	Name          string
}

type CreateNewHouseholdRow struct {
	ID        int32
	CreatedAt time.Time
}

func (q *Queries) CreateNewHousehold(ctx context.Context, arg CreateNewHouseholdParams) (CreateNewHouseholdRow, error) {
	row := q.db.QueryRowContext(ctx, createNewHousehold, arg.ProgramID, arg.GeolocationID, arg.Name)
	var i CreateNewHouseholdRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const createNewHouseholdHead = `-- name: CreateNewHouseholdHead :one
INSERT INTO household_heads (household_id, name, national_id, phone_number, age)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at
`

type CreateNewHouseholdHeadParams struct {
	HouseholdID int32
	Name        string
	NationalID  string
	PhoneNumber string
	Age         int32
}

type CreateNewHouseholdHeadRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateNewHouseholdHead(ctx context.Context, arg CreateNewHouseholdHeadParams) (CreateNewHouseholdHeadRow, error) {
	row := q.db.QueryRowContext(ctx, createNewHouseholdHead,
		arg.HouseholdID,
		arg.Name,
		arg.NationalID,
		arg.PhoneNumber,
		arg.Age,
	)
	var i CreateNewHouseholdHeadRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const createNewHouseholdMember = `-- name: CreateNewHouseholdMember :one
INSERT INTO household_members (household_id, name, age, relation)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at
`

type CreateNewHouseholdMemberParams struct {
	HouseholdID int32
	Name        string
	Age         int32
	Relation    string
}

type CreateNewHouseholdMemberRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateNewHouseholdMember(ctx context.Context, arg CreateNewHouseholdMemberParams) (CreateNewHouseholdMemberRow, error) {
	row := q.db.QueryRowContext(ctx, createNewHouseholdMember,
		arg.HouseholdID,
		arg.Name,
		arg.Age,
		arg.Relation,
	)
	var i CreateNewHouseholdMemberRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getHouseHoldInformation = `-- name: GetHouseHoldInformation :one
SELECT 
    h.id AS household_id, 
    h.program_id, 
    p.name AS program_name, 
    h.geolocation_id, 
    g.county, 
    g.sub_county, 
    hh.id AS household_head_id, 
    hh.name AS household_head_name, 
    hh.phone_number,
    COUNT(hm.id) AS household_member_count
FROM households h
JOIN programs p ON h.program_id = p.id
JOIN geolocations g ON h.geolocation_id = g.id
JOIN household_heads hh ON hh.household_id = h.id
LEFT JOIN household_members hm ON hm.household_id = h.id
WHERE h.id = $1
GROUP BY h.id, p.id, g.id, hh.id
`

type GetHouseHoldInformationRow struct {
	HouseholdID          int32
	ProgramID            int32
	ProgramName          string
	GeolocationID        int32
	County               string
	SubCounty            string
	HouseholdHeadID      int32
	HouseholdHeadName    string
	PhoneNumber          string
	HouseholdMemberCount int64
}

func (q *Queries) GetHouseHoldInformation(ctx context.Context, id int32) (GetHouseHoldInformationRow, error) {
	row := q.db.QueryRowContext(ctx, getHouseHoldInformation, id)
	var i GetHouseHoldInformationRow
	err := row.Scan(
		&i.HouseholdID,
		&i.ProgramID,
		&i.ProgramName,
		&i.GeolocationID,
		&i.County,
		&i.SubCounty,
		&i.HouseholdHeadID,
		&i.HouseholdHeadName,
		&i.PhoneNumber,
		&i.HouseholdMemberCount,
	)
	return i, err
}

const getHouseholdHeadByHouseholdId = `-- name: GetHouseholdHeadByHouseholdId :one
SELECT
    id,
    household_id,
    name,
    national_id,
    phone_number,
    age,
    created_at,
    updated_at
FROM household_heads
WHERE household_id = $1
`

func (q *Queries) GetHouseholdHeadByHouseholdId(ctx context.Context, householdID int32) (HouseholdHead, error) {
	row := q.db.QueryRowContext(ctx, getHouseholdHeadByHouseholdId, householdID)
	var i HouseholdHead
	err := row.Scan(
		&i.ID,
		&i.HouseholdID,
		&i.Name,
		&i.NationalID,
		&i.PhoneNumber,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
